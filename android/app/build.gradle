apply plugin: "com.android.application"

import com.android.build.OutputFile

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

def enableSeparateBuildPerCPUArchitecture = false
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion rootProject.ext.defaultConfig.compileSdkVersion
    buildToolsVersion rootProject.ext.defaultConfig.buildToolsVersion

    defaultConfig {
        applicationId "com.timeablum.app"
        minSdkVersion rootProject.ext.defaultConfig.minSdkVersion
        targetSdkVersion rootProject.ext.defaultConfig.targetSdkVersion
        versionCode rootProject.ext.defaultConfig.versionCode
        versionName rootProject.ext.defaultConfig.versionName
        multiDexEnabled true
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        vectorDrawables.useSupportLibrary = true
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword MYAPP_RELEASE_STORE_PASSWORD
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword MYAPP_RELEASE_KEY_PASSWORD
        }
    }
    buildTypes {
        debug {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
            zipAlignEnabled true

            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    if (variant.buildType.name == 'release') {
                        def releaseApkName = "TimeAblum_${variant.productFlavors[0].name}" +
                                "_${variant.buildType.name}" +
                                "_${releaseTime()}" +
                                "_vn${defaultConfig.versionName}" +
                                "_vc${defaultConfig.versionCode}" +
                                ".apk"
                        outputFileName = releaseApkName
                        variant.packageApplication.outputDirectory = new File("./apk/")
                    }
                }
            }
        }
    }
    flavorDimensions "default"

    productFlavors {
        googleplay {
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

static def releaseTime() {
    return new Date().format("yyyyMMdd")
}

dependencies {
    compile project(':react-native-image-crop-picker')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-navigation')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation rootProject.ext.dependencies['support-v7']
    implementation "com.facebook.react:react-native:+"  // From node_modules
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
